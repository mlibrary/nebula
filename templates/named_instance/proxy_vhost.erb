# Managed by puppet (nebula/named_instance/proxy_vhost.erb)

<VirtualHost *:80>
  ServerName <%= @apache_domain %>
  <%- @apache_aliases.each do |apache_alias| -%>
  ServerAlias <%= apache_alias %>
  <%- end -%>

  ErrorLog         "/var/log/apache2/<%= @apache_app_name %>/error.log"
  CustomLog        "/var/log/apache2/<%= @apache_app_name %>/access.log" combined
  LogLevel info

  <Location />
  <%- if @apache_whitelisted_ips.any? -%>
    Order Deny,Allow
    Deny from all
  <%- @apache_whitelisted_ips.each do |ip| -%>
    Allow from <%= ip %>
  <%- end -%>
  <%- else -%>
    Order allow,deny
    Allow from all
    Deny from env=badrobot
    Deny from env=loadbalancer
  <%- end -%>
  </Location>

  # Redirect all access to https
  RewriteEngine on
  RewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [L,R,NE]
</VirtualHost>

<VirtualHost *:443>
  ServerName <%= @apache_domain %>
  <%- @apache_aliases.each do |apache_alias| -%>
  ServerAlias <%= apache_alias %>
  <%- end -%>

  ErrorLog         "/var/log/apache2/<%= @apache_app_name %>/error.log"
  CustomLog        "/var/log/apache2/<%= @apache_app_name %>/access.log" combined
  LogLevel info

<%- if @apache_terminate_ssl -%>
  SSLEngine on
  SSLCipherSuite "EECDH EDH+aRSA !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS"
  SSLProtocol all -SSLv2 -SSLv3

  SSLCertificateFile /etc/ssl/certs/<%= @apache_ssl_crt %>
  SSLCertificateKeyFile /etc/ssl/private/<%= @apache_ssl_key %>
  SSLCACertificatePath /etc/ssl/chain
  BrowserMatch "MSIE [17-9]" ssl-unclean-shutdown
<%- end -%>

  <Location />
  <%- if @apache_whitelisted_ips.any? -%>
    Order Deny,Allow
    Deny from all
  <%- @apache_whitelisted_ips.each do |ip| -%>
    Allow from <%= ip %>
  <%- end -%>
  <%- else -%>
    Order allow,deny
    Allow from all
    Deny from env=badrobot
    Deny from env=loadbalancer
  <%- end -%>
  </Location>

<%- if @apache_use_auth_oidc -%>
  # Protect single path.  App should redirect here for auth needs.
  <Location <%= [@apache_url_root,"login"].join("/").gsub("//","/") %> >
    AuthType openid-connect
    Require valid-user
    OIDCUnAuthAction auth
  </Location>
  OIDCRedirectURI "https://%{HTTP_HOST}/openid-connect/callback"
  # Populate environemnt with claims, if present
  <Location />
    AuthType openid-connect
    Require valid-user
    OIDCUnAuthAction pass
  </Location>
  <Location /robots.txt>
    AuthType openid-connect
    Require valid-user
    OIDCUnAuthAction pass
    Require all granted
  </Location>
  # Set remote user header to allow app to use http header auth.
  RequestHeader set X-Remote-User     "expr=%{REMOTE_USER}"
<%- end -%>

  RequestHeader set X-Forwarded-Proto 'https'
  RequestHeader unset X-Forwarded-For
  Header set "Strict-Transport-Security" "max-age=3600"

  # Specify DocumentRoot to avoid using a default value.
  DocumentRoot "<%= @apache_static_path %>"

# Directory for serving static files
<Directory "<%= @apache_static_path %>">
  Options FollowSymlinks
  AllowOverride None
</Directory>

RewriteEngine on

# Serve static assets through apache
<%- if @apache_static_directories -%>
RewriteCond <%= @apache_static_path %>/$1 -d [OR]
<%- end -%>
RewriteCond <%= @apache_static_path %>/$1 -f
<%- if @apache_url_root == '/' -%>
RewriteRule ^<%= @apache_url_root %>(.*)$ <%= @apache_static_path %>/$1 [L]
<%- else -%>
RewriteRule ^<%= @apache_url_root %>(.*)$ <%= @apache_static_path %>$1 [L]
<%- end -%>

<%- if @apache_url_root == '/' and @apache_use_auth_oidc -%>
# Don't reverse-proxy openid-connect/callback if deployed at domain root
RewriteCond %{REQUEST_URI} !^/openid-connect/callback
<%- end -%>
# Reverse proxy application to app hostname and port
RewriteRule ^(<%= @apache_url_root %>.*)$ <%= @protocol %>://<%= @apache_app_hostname %>:<%= @apache_port %>$1 [P]
ProxyPassReverse <%= @apache_url_root %> <%= @protocol %>://<%= @apache_app_hostname %>:<%= @apache_port %>/

<%- if @sendfile_path -%>
XSendFile On
RequestHeader Set X-Sendfile-Type X-Sendfile
XSendFilePath <%= @sendfile_path %>
<%- end -%>

</VirtualHost>
