# Managed by puppet (nebula/profile/haproxy/service.cfg.erb)
<% 
  use_throttling = @max_requests_burst > 0 and @max_requests_per_sec > 0
  service_loc = "#{@service}-#{@datacenter}"

  nodes = @node_names.sort
  .map{|node_id| scope.call_function('fact_for', [node_id, 'networking'])}
  .map{|networking| [networking['hostname'], networking['ip']]}

  def duration
    (@max_requests_burst / @max_requests_per_sec).to_s + "s"
  end

  def backend_throttling(service_prefix)
    <<EOT
  stick-table type ip size 200k expire #{duration} store http_req_rate(#{duration}),bytes_out_rate(#{duration})
  tcp-request content track-sc2 src
  acl #{@service}_http_req_rate_abuse src_http_req_rate(#{service_prefix}-back) gt 10
  acl #{@service}_mark_as_abuser src_inc_gpc0(#{service_prefix}-front) gt 0
  http-request deny deny_status 503 if #{backend_whitelist}#{@service}_http_req_rate_abuse mark_as_abuser
EOT
  end

  def backend_server(hostname,ip,port)
    "  server #{hostname} #{ip}:#{port} check cookie s#{ip.split('.').last}"
  end

  def backend_whitelist
    @whitelists.select { |_,exemptions| exemptions.size() > 0 }
      .map do |whitelist,_| 
        "!#{@service}_whitelist_#{whitelist} "
      end.join("")
  end

  def frontend_throttling(service_prefix)
    <<EOT
  stick-table type ip size 200k expire #{duration} store gpc0
  acl #{@service}_source_is_abuser src_get_gpc0(#{service_prefix}-front) gt 0
  use_backend #{@service}_blocked if #{@service}_source_is_abuser
  tcp-request connection track-sc0 src
EOT
  end

  def frontend_whitelist
    @whitelists.select { |_,exemptions| exemptions.size() > 0 }
      .map do |whitelist,_| 
        "  acl #{@service}_whitelist_#{whitelist} src -n -f #{@service}_whitelist_#{whitelist}.txt\n"
      end.join("")
  end

  def bind_options(args)
    port = args[:port]
    ssl = args.fetch(:ssl,'')
    "#{@floating_ip}:#{port}#{ssl}"
  end
    
  protocols = { 
    http: { port: 80 },
    https: { port: 443, ssl: " ssl crt /etc/ssl/private/#{@service}" }
  }

-%>

<% protocols.each do |protocol,options| -%>
<% service_prefix = "#{service_loc}-#{protocol}" -%>

backend <%= service_prefix %>-back
  http-check expect status 200
<%= backend_throttling(service_prefix) if use_throttling -%>
<%= nodes.map { |hostname,ip| backend_server(hostname,ip,options[:port]) }.join("\n") %>

frontend <%= service_prefix %>-front
  bind <%= bind_options(options) %>
  stats uri /haproxy?stats
  default_backend <%= service_prefix %>-back
<% if protocol == :https -%>
  http-response set-header "Strict-Transport-Security" "max-age=31536000"
<% end -%>
  http-request set-header X-Client-IP %ci
  http-request set-header X-Forwarded-Proto <%= protocol %>
<%= frontend_throttling(service_prefix) if use_throttling -%>
<%= frontend_whitelist %>

<% end %>

<% if use_throttling -%>
backend <%= service_loc %>-blocked
  http-request deny deny_status 503
<% end -%>
